1. ORM Stands for object Relational Mapping
2. It is a way to query a database without using an actual database query.
3. We use python object to query the database.


ORM Examples
Let's Take "Student" as a DB table

students = Student.objects.all() #ORM
print(students) # return all students

Student.objects.create(name="name", email="email", age = 12)


s= student[0]
s.name= "Changed"
s.save()

It will update


Read ORM
---------------------------------------------------------------------

Student.objects.all() ==> Returns all the value from the table in query set
Student.objects.filter() ==> filter gives value in query set which contains objects according to the conditions.
                            If value does not exist it will return empty query set
                            For multiple value it returns multiple objects in a query set.

Student.objects.get() ==> it only returns value in objects according to the conditions. (can return only one value else return error to other case)
                            Returns DoesNotExistError if not found
                            Returns multipleObjectsReturned if found multiple value.
                            Doesnot have anyother methods for update but you can delete using delete method

CREATE ORM
-----------------------------------------------------------------------
Student.objects.create(Column_name="value") --> Create a row in a database table


Update ORM
-----------------------------------------------------------------------
Student.objects.filter(conditions).update(Column_name=value)

Update For foreign key 
Student.objects.filter(id=6).update(Classroom = Classroom.objects.get(id=2)) using object

DELETE ORM
-------------------------------------------------------------------------
Student.objects.filter(id=100).delete()
Student.objects.get(id=100).delete()



Entering value in Foreign Key
For Relational in case of foreign key {
    if variable from table is given then you can provide primary id of parent table
    Student.objects.create(name="name", email="email", age = 12, foreignkey = value)
    Examples :
        Student.objects.filter(id=6).update(Classroom_id = 1) using object



    if models variable is given then provide objects
    
    Examples:
        Student.objects.filter(id=6).update(Classroom = Classroom.objects.get(id=2)) using object
    Student.objects.create(name="name", email="email", age = 12, foreignkey = Student.objects.filter(id=1))
}


Accessibg Value from child table to parent table

Dataobect.parentclassname.Column_name
Dataobect.related_name.Column_name

Examples:
    c = Classroom.objects.get(id=1)
    c.classroom_students.all()  # all is used because of multiple value
                                    Can use other ORMs Like filter(), update()

    Student.objects.filter(Classroom_id=1)


Advance ORM
------------------------------------------------------------------------------------------------------------------
Student.objects.all()[1:2] #slicing

Student.objects.filter(age__gt= 30) # age greater than 30
Student.objects.filter(age__lt= 30) # age less than 30
Student.objects.filter(age__lte= 30) # less than or equals
Student.objects.filter(age__gte= 30) #greater than or equal
Student.objects.filter(age__range= (10,30)) # age from 10 to 30
Student.objects.filter(age__in= [1,2,3]) #checks multiple value
Student.objects.filter(name__contains= "n") # check if name contains n in it. LIKE operator
Student.objects.filter(name__icontains= "n") # it does care about the letter case. In newer version it does not needs icontains
Student.objects.filter(name__endswith= "n") # check if data ends with n
Student.objects.filter(name__iendswith= "n") #case insensitive
Student.objects.filter(name__startswith= "n") #check if the letter starts with 
Student.objects.filter(name="Anukul" , age = 13) # ',' means and operator
import django.db.models import Q
Student.objects.filter(Q(name="Anukul")|Q(age="21")) # OR Operator uses Q and have to import in views
Student.objects.exclude(id=1) # works as NOT Operator
Student.objects.filter(Classroom__isnull=True) #checks if classroom table have null values
Student.objects.filter(Classroom__isnull=False) #checks if classroom column is not null
Student.objects.all().count() # count the number of data  can also be used with filter
Student.objects.filter().count()
Student.objects.all().order_by("id") #order in ascending order
Student.objects.all().order_by("-id") # decending order
Student.objects.all().order_by("name","age") # gives priority for name and then age
Student.objects.filter(classroom__name="one") #__name uses the data from classroom table
StudentProfile.objects.filter(student__age=21) #it gives access to the column of age from Student Profile table

From parent table to child table

Student.objects.filter(studentprofile__address = "Kadaghari") # use related name
Classroom.objects.filter(classroom_students__name = "Bhupendra") #can access the data of child table from parent table
Student.objects.filter(studentprofile__address__isnull = False) #checks if the student do not have profile
Classroom.objects.filter(classroom_students__age=30).distinct() #disticnt helps get the unique data



Many To Many ORM
--------------------------------------
Article and Publications are two table
Publication Forieng key is in article table
so to upload data from publication table refrence key should be used

These ORM is used to add the element in bridge table


table1Object.foreignkeyofThat Table.add(object of another table)
Article.objects.get(id=1).Publication.add(Publication.objects.get(id=1))

Publication.objects.get(id=1).article_set.add(Article.objects.get(id=1))  #Using Related Name

Article.objects.get(id=2).Publication.all()  # Checks every publication of Article 1
Publication.objects.get(id=1).article_set.all() #checks which article are published from article 1


Article.objects.filter(Publication=1)  #checks which article are published from publication 1
Publication.objects.filter(article=1) #chceks which publication has published article 1 look up doesnot use _set.



Article.objects.get(id=2).Publication.remove(Publication.objects.get(id=1)) #Remove element
Publication.objects.get(id=1).article_set.remove(Article.objects.get(id=2))


##Accessing the bridge table

Ap = Article.Publication.through
Ap.objects.all()
Ap.objects.get(id=1)

